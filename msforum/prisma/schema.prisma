
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text @map("id")
  userId             String    @db.Text @map("user_id")
  accountid          String    @db.Text @map("accountid")
  providerid         String    @db.Text @map("providerid")
  accesstoken        String?   @db.Text @map("accesstoken")
  refreshtoken       String?   @db.Text @map("refreshtoken")
  accesstokenexpiresat DateTime? @db.Timestamptz @map("accesstokenexpiresat")
  refreshtokenexpiresat DateTime? @db.Timestamptz @map("refreshtokenexpiresat")
  scope              String?   @db.Text @map("scope")
  idtoken            String?   @db.Text @map("idtoken")
  password           String?   @db.Text @map("password")
  createdat          DateTime? @db.Timestamptz @default(dbgenerated("now()")) @map("createdat")
  updatedat          DateTime? @db.Timestamptz @default(dbgenerated("now()")) @map("updatedat")

  userdata           Userdata  @relation(fields: [userId], references: [user_id])

  @@map("account")
}

model Article {
  idart        Int          @id @default(dbgenerated("nextval('article_idart_seq'::regclass)")) @map("idart")
  content      String       @db.Text @map("content")
  userId       String       @db.VarChar @map("user_id")
  idcat        Int?         @map("idcat")
  title        String       @db.VarChar @map("title")
  datetime     DateTime?    @default(dbgenerated("now()")) @map("datetime")

  category     Category?    @relation(fields: [idcat], references: [idcat])
  userdata     Userdata     @relation(fields: [userId], references: [user_id])

  comments     Comment[]
  notifications Notification[]
  upvoteArticles UpvoteArticle[]

  @@map("article")
}

model BadgeGrades {
  idgrade    BigInt    @id @default(autoincrement()) @map("idgrade")
  created_at DateTime  @db.Timestamptz @default(dbgenerated("now()")) @map("created_at")
  name       String?   @db.Text @map("name")

  user_badges UserBadge[]

  @@map("badge_grades")
}

model Category {
  idcat       Int       @id @default(dbgenerated("nextval('category_idcat_seq'::regclass)")) @map("idcat")
  name        String    @db.VarChar @map("name")
  description String?   @db.VarChar @map("description")

  articles    Article[]

  @@map("category")
}

model Comment {
  idcomment   Int         @id @default(dbgenerated("nextval('comment_idcomment_seq'::regclass)")) @map("idcomment")
  content     String      @db.Text @map("content")
  idart       Int         @map("idart")
  userId      String      @db.VarChar @map("user_id")
  datetime    DateTime?   @default(dbgenerated("now()")) @map("datetime")
  reply_to    Int?        @map("reply_to")
  upvotes     Int         @default(0) @map("upvotes")

  article     Article     @relation(fields: [idart], references: [idart])
  userdata    Userdata    @relation(fields: [userId], references: [user_id])

  upvoteComments UpvoteComment[]

  @@map("comment")
}

model Draft {
  draftid    BigInt     @id @default(autoincrement()) @map("draftid")
  title      String     @db.Text @map("title")
  content    String     @db.Text @map("content")
  date       DateTime   @db.Timestamptz @map("date")
  archived   Boolean    @default(false) @map("archived")
  userId     String     @db.VarChar @map("user_id")

  userdata   Userdata   @relation(fields: [userId], references: [user_id])

  @@map("draft")
}

model Notification {
  idnotification BigInt    @id @default(autoincrement()) @map("idnotification")
  created_at     DateTime  @db.Timestamptz @default(dbgenerated("now()")) @map("created_at")
  seen           Boolean   @default(false) @map("seen")
  type           String    @db.Text @map("type")
  userId         String    @db.VarChar @map("user_id")
  idart          Int?      @map("idart")
  mentionAuthorId String?  @db.VarChar @map("mention_author_id")

  userdata       Userdata  @relation("NotificationUser", fields: [userId], references: [user_id])
  mentionAuthor  Userdata? @relation("NotificationMentionAuthor", fields: [mentionAuthorId], references: [user_id])
  article        Article?  @relation(fields: [idart], references: [idart])

  @@map("notification")
}

model Session {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text @map("id")
  userId      String    @db.Text @map("user_id")
  token       String    @db.Text @unique @map("token")
  expiresat   DateTime  @db.Timestamptz @map("expiresat")
  ipaddress   String?   @db.Text @map("ipaddress")
  useragent   String?   @db.Text @map("useragent")
  createdat   DateTime? @db.Timestamptz @default(dbgenerated("now()")) @map("createdat")
  updatedat   DateTime? @db.Timestamptz @default(dbgenerated("now()")) @map("updatedat")

  userdata    Userdata  @relation(fields: [userId], references: [user_id])

  @@map("session")
}

model Subscriptions {
  idsub       Int       @id @default(dbgenerated("nextval('subscriptions_idsub_seq'::regclass)")) @map("idsub")
  name        String    @db.VarChar @map("name")
  description String    @db.VarChar @map("description")

  userdata    Userdata[]

  @@map("subscriptions")
}

model UpvoteArticle {
  idupart    BigInt   @id @default(autoincrement()) @map("idupart")
  userId     String   @db.VarChar @map("user_id")
  idart      Int      @map("idart")
  upvoted    Boolean  @default(false) @map("upvoted")

  article    Article  @relation(fields: [idart], references: [idart])
  userdata   Userdata @relation(fields: [userId], references: [user_id])

  @@map("upvote_article")
}

model UpvoteComment {
  idupcom    BigInt   @id @default(autoincrement()) @map("idupcom")
  userId     String   @db.VarChar @map("user_id")
  idcomment  Int      @map("idcomment")
  upvoted    Boolean  @default(false) @map("upvoted")

  comment    Comment  @relation(fields: [idcomment], references: [idcomment])
  userdata   Userdata @relation(fields: [userId], references: [user_id])

  @@map("upvote_comment")
}

model UserBadge {
  idbadge     BigInt    @id @default(autoincrement()) @map("idbadge")
  obtained_at DateTime  @db.Timestamptz @default(dbgenerated("now()")) @map("obtained_at")
  idgrade     BigInt    @map("idgrade")
  userId      String?   @db.VarChar @map("user_id")

  badgeGrades BadgeGrades @relation(fields: [idgrade], references: [idgrade])
  userdata    Userdata?   @relation(fields: [userId], references: [user_id])

  @@map("user_badge")
}

model Userdata {
  user_id        String        @id @db.VarChar @map("user_id")
  email          String        @db.VarChar @map("email")
  idsub          Int?          @map("idsub")
  apiToken       String        @db.Text @default(dbgenerated("gen_random_uuid()")) @unique @map("apiToken")
  username       String        @db.Text @default("John Doe") @unique @map("username")
  bio            String?       @db.Text @default("A beautiful msforum user!") @map("bio")
  readme         String? @db.Text @map("readme")
  profile_picture String?       @db.Text @map("profile_picture")
  emailVerified   DateTime?     @map("emailVerified")
  createdAt       DateTime?    @default(dbgenerated("now()")) @map("createdAt")
  updatedAt       DateTime?    @default(dbgenerated("now()")) @map("updatedAt")

  account         Account[]
  articles        Article[]
  badges          UserBadge[]
  comments        Comment[]
  drafts          Draft[]
  notifications   Notification[]  @relation("NotificationUser")
  notificationsMentioned Notification[] @relation("NotificationMentionAuthor")
  sessions        Session[]
  upvoteArticles  UpvoteArticle[]
  upvoteComments  UpvoteComment[]
  subscription    Subscriptions?  @relation(fields: [idsub], references: [idsub])

  @@map("userdata")
}

model Verification {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text @map("id")
  identifier String    @db.Text @map("identifier")
  value      String    @db.Text @map("value")
  expiresAt  DateTime  @db.Timestamptz @map("expiresAt")
  createdAt  DateTime? @db.Timestamptz @default(dbgenerated("now()")) @map("createdAt")
  updatedAt  DateTime? @db.Timestamptz @default(dbgenerated("now()")) @map("updatedAt")

  @@map("verification")
}
