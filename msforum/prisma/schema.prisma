generator client {
  provider = "prisma-client-js"
  output = "../src/generated/prisma"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  idart     Int       @id @default(autoincrement())
  content   String
  user_id   String
  idcat     Int?
  title     String
  datetime  DateTime? @default(now())

  // Relations
  category   Category?    @relation(fields: [idcat], references: [idcat])
  author     Userdata     @relation(fields: [user_id], references: [user_id])
  comments   Comment[]
  upvotes    UpvoteArticle[]
  notifications Notification[]

  @@map("article")
}

model BadgeGrades {
  idgrade    BigInt   @id @default(autoincrement())
  created_at DateTime @default(now())
  name       String?

  badges UserBadge[]

  @@map("badge_grades")
}

model Category {
  idcat       Int      @id @default(autoincrement())
  name        String
  description String?

  articles Article[]

  @@map("category")
}

model Comment {
  idcomment  Int      @id @default(autoincrement())
  content    String
  idart      Int
  user_id    String
  datetime   DateTime? @default(now())
  reply_to   Int?
  upvotes    Int      @default(0)

  // Relations
  article Article @relation(fields: [idart], references: [idart])
  author    Userdata @relation(fields: [user_id], references: [user_id])
  upvoteComments UpvoteComment[]

  @@map("comment")
}

model Draft {
  draftid  BigInt   @id @default(autoincrement())
  title    String
  content  String
  date     DateTime
  archived Boolean  @default(false)
  user_id  String

  user Userdata @relation(fields: [user_id], references: [user_id])

  @@map("draft")
}

model Notification {
  idnotification Int   @id @default(autoincrement())
  created_at     DateTime @default(now())
  seen           Boolean  @default(false)
  type           String
  user_id        String
  idart          Int?
  mention_author_id String?

  // Relations
  user          Userdata  @relation("NotificationUser", fields: [user_id], references: [user_id])
  mentionAuthor Userdata? @relation("MentionAuthor", fields: [mention_author_id], references: [user_id])
  article       Article?  @relation(fields: [idart], references: [idart])

  @@map("notification")
}

model Subscriptions {
  idsub       Int    @id @default(autoincrement())
  name        String
  description String

  users Userdata[]

  @@map("subscriptions")
}

model UpvoteArticle {
  idupart  BigInt  @id @default(autoincrement())
  user_id  String
  idart    Int
  upvoted  Boolean @default(false)

  // Relations
  user    Userdata @relation(fields: [user_id], references: [user_id])
  article Article  @relation(fields: [idart], references: [idart])

  @@map("upvote_article")
}

model UpvoteComment {
  idupcom   BigInt  @id @default(autoincrement())
  user_id   String
  idcomment Int
  upvoted   Boolean @default(false)

  // Relations
  user    Userdata @relation(fields: [user_id], references: [user_id])
  comment Comment  @relation(fields: [idcomment], references: [idcomment])

  @@map("upvote_comment")
}

model UserBadge {
  idbadge    BigInt   @id @default(autoincrement())
  obtained_at DateTime @default(now())
  idgrade    BigInt
  user_id    String?

  // Relations
  user   Userdata?    @relation(fields: [user_id], references: [user_id])
  grade  BadgeGrades  @relation(fields: [idgrade], references: [idgrade])

  @@map("user_badge")
}

model Follow {
  idfollow     Int   @id @default(autoincrement())
  follower_id  String
  followed_id  String
  createdat    DateTime? @default(now())

  // Relazioni
  follower Userdata @relation("FollowerRelation", fields: [follower_id], references: [user_id], onDelete: Cascade)
  followed Userdata @relation("FollowedRelation", fields: [followed_id], references: [user_id], onDelete: Cascade)

  @@unique([follower_id, followed_id], name: "unique_follow")
  @@map("follow")
}

model Userdata {
  user_id        String  @id
  email          String
  idsub          Int?
  apiToken       String  @default(dbgenerated("gen_random_uuid()"))
  username       String  @default("John Doe")
  bio            String? @default("A beautiful msforum user!")
  readme         String? @default("# üëã Welcome to your msforum profile! ‚ö†Ô∏è **No profile README found**  You can customize your public profile by setting up a `README.md` file.")
  profile_picture String?

  // Relations
  subscription   Subscriptions? @relation(fields: [idsub], references: [idsub])
  articles       Article[]
  comments       Comment[]
  drafts         Draft[]
  notifications  Notification[] @relation("NotificationUser")
  mentionNotifications Notification[] @relation("MentionAuthor")
  upvoteArticles UpvoteArticle[]
  upvoteComments UpvoteComment[]
  followers Follow[] @relation("FollowerRelation")
  following Follow[] @relation("FollowedRelation")
  badges         UserBadge[]

  @@map("userdata")
}
